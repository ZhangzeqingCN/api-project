// Generated by delombok at Tue Jun 20 17:11:51 CST 2023
package com.example.delombok.domain.req.auth;

import com.example.delombok.access.Gender;
import jakarta.validation.constraints.Email;
import lombok.*;

public class RegisterRequestBody {
    @NonNull
    private String username;
    @NonNull
    private String password1;
    @NonNull
    private String password2;
    @Email
    private String email;
    private String phone;
    private Gender gender;

    @java.lang.SuppressWarnings("all")
    private static Gender $default$gender() {
        return Gender.Unknown;
    }


    @java.lang.SuppressWarnings("all")
    public static class RegisterRequestBodyBuilder {
        @java.lang.SuppressWarnings("all")
        private String username;
        @java.lang.SuppressWarnings("all")
        private String password1;
        @java.lang.SuppressWarnings("all")
        private String password2;
        @java.lang.SuppressWarnings("all")
        private String email;
        @java.lang.SuppressWarnings("all")
        private String phone;
        @java.lang.SuppressWarnings("all")
        private boolean gender$set;
        @java.lang.SuppressWarnings("all")
        private Gender gender$value;

        @java.lang.SuppressWarnings("all")
        RegisterRequestBodyBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody.RegisterRequestBodyBuilder username(@NonNull final String username) {
            if (username == null) {
                throw new java.lang.NullPointerException("username is marked non-null but is null");
            }
            this.username = username;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody.RegisterRequestBodyBuilder password1(@NonNull final String password1) {
            if (password1 == null) {
                throw new java.lang.NullPointerException("password1 is marked non-null but is null");
            }
            this.password1 = password1;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody.RegisterRequestBodyBuilder password2(@NonNull final String password2) {
            if (password2 == null) {
                throw new java.lang.NullPointerException("password2 is marked non-null but is null");
            }
            this.password2 = password2;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody.RegisterRequestBodyBuilder email(final String email) {
            this.email = email;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody.RegisterRequestBodyBuilder phone(final String phone) {
            this.phone = phone;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody.RegisterRequestBodyBuilder gender(final Gender gender) {
            this.gender$value = gender;
            gender$set = true;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RegisterRequestBody build() {
            Gender gender$value = this.gender$value;
            if (!this.gender$set) gender$value = RegisterRequestBody.$default$gender();
            return new RegisterRequestBody(this.username, this.password1, this.password2, this.email, this.phone, gender$value);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "RegisterRequestBody.RegisterRequestBodyBuilder(username=" + this.username + ", password1=" + this.password1 + ", password2=" + this.password2 + ", email=" + this.email + ", phone=" + this.phone + ", gender$value=" + this.gender$value + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static RegisterRequestBody.RegisterRequestBodyBuilder builder() {
        return new RegisterRequestBody.RegisterRequestBodyBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public void setUsername(@NonNull final String username) {
        if (username == null) {
            throw new java.lang.NullPointerException("username is marked non-null but is null");
        }
        this.username = username;
    }

    @java.lang.SuppressWarnings("all")
    public void setPassword1(@NonNull final String password1) {
        if (password1 == null) {
            throw new java.lang.NullPointerException("password1 is marked non-null but is null");
        }
        this.password1 = password1;
    }

    @java.lang.SuppressWarnings("all")
    public void setPassword2(@NonNull final String password2) {
        if (password2 == null) {
            throw new java.lang.NullPointerException("password2 is marked non-null but is null");
        }
        this.password2 = password2;
    }

    @java.lang.SuppressWarnings("all")
    public void setEmail(final String email) {
        this.email = email;
    }

    @java.lang.SuppressWarnings("all")
    public void setPhone(final String phone) {
        this.phone = phone;
    }

    @java.lang.SuppressWarnings("all")
    public void setGender(final Gender gender) {
        this.gender = gender;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public String getUsername() {
        return this.username;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public String getPassword1() {
        return this.password1;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public String getPassword2() {
        return this.password2;
    }

    @java.lang.SuppressWarnings("all")
    public String getEmail() {
        return this.email;
    }

    @java.lang.SuppressWarnings("all")
    public String getPhone() {
        return this.phone;
    }

    @java.lang.SuppressWarnings("all")
    public Gender getGender() {
        return this.gender;
    }

    @java.lang.SuppressWarnings("all")
    public RegisterRequestBody(@NonNull final String username, @NonNull final String password1, @NonNull final String password2, final String email, final String phone, final Gender gender) {
        if (username == null) {
            throw new java.lang.NullPointerException("username is marked non-null but is null");
        }
        if (password1 == null) {
            throw new java.lang.NullPointerException("password1 is marked non-null but is null");
        }
        if (password2 == null) {
            throw new java.lang.NullPointerException("password2 is marked non-null but is null");
        }
        this.username = username;
        this.password1 = password1;
        this.password2 = password2;
        this.email = email;
        this.phone = phone;
        this.gender = gender;
    }

    @java.lang.SuppressWarnings("all")
    public RegisterRequestBody() {
        this.gender = RegisterRequestBody.$default$gender();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "RegisterRequestBody(username=" + this.getUsername() + ", password1=" + this.getPassword1() + ", password2=" + this.getPassword2() + ", email=" + this.getEmail() + ", phone=" + this.getPhone() + ", gender=" + this.getGender() + ")";
    }
}
